window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":5,"numPassedTests":73,"numPendingTestSuites":2,"numPendingTests":4,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":47,"numTotalTests":77,"startTime":1658166201778,"success":false,"testResults":[{"leaks":false,"numFailingTests":0,"numPassingTests":0,"numPendingTests":3,"numTodoTests":0,"perfStats":{"end":1658166206642,"runtime":3050,"slow":false,"start":1658166203592},"skipped":true,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/components/contenttypes-fields/dot-form/services/dot-upload.service.spec.ts","testResults":[{"ancestorTitles":["DotUploadService"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DotUploadService should send data to the URL endpoint with the correct information","location":null,"numPassingAsserts":0,"status":"pending","title":"should send data to the URL endpoint with the correct information"},{"ancestorTitles":["DotUploadService"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DotUploadService should send data to the binary file endpoint without max file size","location":null,"numPassingAsserts":0,"status":"pending","title":"should send data to the binary file endpoint without max file size"},{"ancestorTitles":["DotUploadService"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DotUploadService should send data to the binary file endpoint with max file size","location":null,"numPassingAsserts":0,"status":"pending","title":"should send data to the binary file endpoint with max file size"}],"failureMessage":null},{"leaks":false,"numFailingTests":0,"numPassingTests":0,"numPendingTests":1,"numTodoTests":0,"perfStats":{"end":1658166206812,"runtime":3277,"slow":false,"start":1658166203535},"skipped":true,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/services/dot-asset/dot-asset.service.spec.ts","testResults":[{"ancestorTitles":["DotAssetService"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"DotAssetService test","location":null,"numPassingAsserts":0,"status":"pending","title":"test"}],"failureMessage":null},{"leaks":false,"numFailingTests":0,"numPassingTests":1,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1658166206885,"runtime":3076,"slow":false,"start":1658166203809},"skipped":false,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/utils/props/DotFieldPropError.spec.ts","testResults":[{"ancestorTitles":["DotFieldPropError"],"duration":32,"failureDetails":[],"failureMessages":[],"fullName":"DotFieldPropError should throw Warning exception with the correct information","location":null,"numPassingAsserts":0,"status":"passed","title":"should throw Warning exception with the correct information"}],"failureMessage":null},{"leaks":false,"numFailingTests":0,"numPassingTests":23,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1658166207152,"runtime":3619,"slow":false,"start":1658166203533},"skipped":false,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/utils/props/validators/props.spec.ts","testResults":[{"ancestorTitles":["Props Validators","stringValidator"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators stringValidator should not console.warn message when value is a string","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when value is a string"},{"ancestorTitles":["Props Validators","stringValidator"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators stringValidator should console.warn message when value is not a string","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when value is not a string"},{"ancestorTitles":["Props Validators","regexValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators regexValidator should not console.warn message when regular expression is valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when regular expression is valid"},{"ancestorTitles":["Props Validators","regexValidator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators regexValidator should console.warn message when when regular expression is invalid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when regular expression is invalid"},{"ancestorTitles":["Props Validators","numberValidator"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators numberValidator should not  console.warn message when is a number","location":null,"numPassingAsserts":0,"status":"passed","title":"should not  console.warn message when is a number"},{"ancestorTitles":["Props Validators","numberValidator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators numberValidator should console.warn message when when is not a number","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when is not a number"},{"ancestorTitles":["Props Validators","dateValidator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateValidator should not console.warn message when is a valid date","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when is a valid date"},{"ancestorTitles":["Props Validators","dateValidator"],"duration":41,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateValidator should console.warn message when when is a invalid date","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when is a invalid date"},{"ancestorTitles":["Props Validators","dateRangeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateRangeValidator should not console.warn message when dates are valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when dates are valid"},{"ancestorTitles":["Props Validators","dateRangeValidator"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateRangeValidator should console.warn message when when second date is higher than first","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when second date is higher than first"},{"ancestorTitles":["Props Validators","dateRangeValidator"],"duration":16,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateRangeValidator should console.warn message when when fist date is not valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when fist date is not valid"},{"ancestorTitles":["Props Validators","dateRangeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateRangeValidator should console.warn message when when second  date is not valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when second  date is not valid"},{"ancestorTitles":["Props Validators","dateRangeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateRangeValidator should console.warn message when value are not dates","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when value are not dates"},{"ancestorTitles":["Props Validators","timeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators timeValidator should not console.warn message when is a valid time","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when is a valid time"},{"ancestorTitles":["Props Validators","timeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators timeValidator should console.warn message when when is a invalid time","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when when is a invalid time"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should not console.warn message when is a valid date and rime","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when is a valid date and rime"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should not console.warn message when is a valid date","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when is a valid date"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should not console.warn message when is a valid time","location":null,"numPassingAsserts":0,"status":"passed","title":"should not console.warn message when is a valid time"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should console.warn message only when only date is invalid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message only when only date is invalid"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should console.warn message when date is invalid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when date is invalid"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should console.warn message only when time is invalid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message only when time is invalid"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should console.warn message when time is invalid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when time is invalid"},{"ancestorTitles":["Props Validators","dateTimeValidator"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Props Validators dateTimeValidator should console.warn message when value is invalid","location":null,"numPassingAsserts":0,"status":"passed","title":"should console.warn message when value is invalid"}],"failureMessage":null},{"leaks":false,"numFailingTests":0,"numPassingTests":14,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1658166207167,"runtime":3536,"slow":false,"start":1658166203631},"skipped":false,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/utils/props/validators/date.spec.ts","testResults":[{"ancestorTitles":["Date Validators","dotValidateDate"],"duration":50,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotValidateDate should return the date when is valid ","location":null,"numPassingAsserts":0,"status":"passed","title":"should return the date when is valid "},{"ancestorTitles":["Date Validators","dotValidateDate"],"duration":15,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotValidateDate should return null when is invalid date","location":null,"numPassingAsserts":0,"status":"passed","title":"should return null when is invalid date"},{"ancestorTitles":["Date Validators","dotValidateTime"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotValidateTime should return the time when is valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return the time when is valid"},{"ancestorTitles":["Date Validators","dotValidateTime"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotValidateTime should return null when value is incomplete","location":null,"numPassingAsserts":0,"status":"passed","title":"should return null when value is incomplete"},{"ancestorTitles":["Date Validators","dotValidateTime"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotValidateTime should return null when is an invalid time","location":null,"numPassingAsserts":0,"status":"passed","title":"should return null when is an invalid time"},{"ancestorTitles":["Date Validators","dotParseDate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotParseDate should return DateSlot with date and time when value is valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return DateSlot with date and time when value is valid"},{"ancestorTitles":["Date Validators","dotParseDate"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotParseDate should return DateSlot with date  when value is valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return DateSlot with date  when value is valid"},{"ancestorTitles":["Date Validators","dotParseDate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotParseDate should return DateSlot with time when value is valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return DateSlot with time when value is valid"},{"ancestorTitles":["Date Validators","dotParseDate"],"duration":18,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotParseDate should return empty DateSlot with invalid values","location":null,"numPassingAsserts":0,"status":"passed","title":"should return empty DateSlot with invalid values"},{"ancestorTitles":["Date Validators","dotParseDate"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators dotParseDate should return empty DateSlot with null value","location":null,"numPassingAsserts":0,"status":"passed","title":"should return empty DateSlot with null value"},{"ancestorTitles":["Date Validators","isValidDateSlot"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators isValidDateSlot should return true if date and time are valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true if date and time are valid"},{"ancestorTitles":["Date Validators","isValidDateSlot"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators isValidDateSlot should return true if date or time are valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true if date or time are valid"},{"ancestorTitles":["Date Validators","isValidDateSlot"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators isValidDateSlot should return false if raw data contains date and time and slot only one of them","location":null,"numPassingAsserts":0,"status":"passed","title":"should return false if raw data contains date and time and slot only one of them"},{"ancestorTitles":["Date Validators","isValidDateSlot"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"Date Validators isValidDateSlot should return false with null values","location":null,"numPassingAsserts":0,"status":"passed","title":"should return false with null values"}],"failureMessage":null},{"leaks":false,"numFailingTests":0,"numPassingTests":27,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1658166207201,"runtime":3530,"slow":false,"start":1658166203671},"skipped":false,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/utils/utils.spec.ts","testResults":[{"ancestorTitles":["getClassNames"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"getClassNames should return field CSS classes","location":null,"numPassingAsserts":0,"status":"passed","title":"should return field CSS classes"},{"ancestorTitles":["getDotOptionsFromFieldValue"],"duration":14,"failureDetails":[],"failureMessages":[],"fullName":"getDotOptionsFromFieldValue should return label/value","location":null,"numPassingAsserts":0,"status":"passed","title":"should return label/value"},{"ancestorTitles":["getDotOptionsFromFieldValue"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getDotOptionsFromFieldValue should support \r\n as option splitter","location":null,"numPassingAsserts":0,"status":"passed","title":"should support \r\n as option splitter"},{"ancestorTitles":["getDotOptionsFromFieldValue"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getDotOptionsFromFieldValue should support \r\n and semicolon as option splitter","location":null,"numPassingAsserts":0,"status":"passed","title":"should support \r\n and semicolon as option splitter"},{"ancestorTitles":["getDotOptionsFromFieldValue"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"getDotOptionsFromFieldValue should empty array when invalid format","location":null,"numPassingAsserts":0,"status":"passed","title":"should empty array when invalid format"},{"ancestorTitles":["getDotOptionsFromFieldValue"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getDotOptionsFromFieldValue should handle other type","location":null,"numPassingAsserts":0,"status":"passed","title":"should handle other type"},{"ancestorTitles":["getErrorClass"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getErrorClass should return error CSS","location":null,"numPassingAsserts":0,"status":"passed","title":"should return error CSS"},{"ancestorTitles":["getErrorClass"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getErrorClass should not return error CSS","location":null,"numPassingAsserts":0,"status":"passed","title":"should not return error CSS"},{"ancestorTitles":["getHintId"],"duration":13,"failureDetails":[],"failureMessages":[],"fullName":"getHintId should return hint id correctly","location":null,"numPassingAsserts":0,"status":"passed","title":"should return hint id correctly"},{"ancestorTitles":["getHintId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getHintId should return undefined","location":null,"numPassingAsserts":0,"status":"passed","title":"should return undefined"},{"ancestorTitles":["getId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getId should return id","location":null,"numPassingAsserts":0,"status":"passed","title":"should return id"},{"ancestorTitles":["getLabelId"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getLabelId should return label id correctly","location":null,"numPassingAsserts":0,"status":"passed","title":"should return label id correctly"},{"ancestorTitles":["getLabelId"],"duration":22,"failureDetails":[],"failureMessages":[],"fullName":"getLabelId should return undefined","location":null,"numPassingAsserts":0,"status":"passed","title":"should return undefined"},{"ancestorTitles":["getOriginalStatus"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getOriginalStatus should return initial field Status","location":null,"numPassingAsserts":0,"status":"passed","title":"should return initial field Status"},{"ancestorTitles":["getOriginalStatus"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"getOriginalStatus should return field Status with overwrite dotValid equal false","location":null,"numPassingAsserts":0,"status":"passed","title":"should return field Status with overwrite dotValid equal false"},{"ancestorTitles":["getStringFromDotKeyArray"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getStringFromDotKeyArray should transform to string","location":null,"numPassingAsserts":0,"status":"passed","title":"should transform to string"},{"ancestorTitles":["getTagError"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"getTagError should return error tag","location":null,"numPassingAsserts":0,"status":"passed","title":"should return error tag"},{"ancestorTitles":["getTagError"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getTagError should not return Error tag","location":null,"numPassingAsserts":0,"status":"passed","title":"should not return Error tag"},{"ancestorTitles":["getTagHint"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getTagHint should return Hint tag","location":null,"numPassingAsserts":0,"status":"passed","title":"should return Hint tag"},{"ancestorTitles":["getTagHint"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getTagHint should not return Hint tag","location":null,"numPassingAsserts":0,"status":"passed","title":"should not return Hint tag"},{"ancestorTitles":["updateStatus"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"updateStatus should return updated field Status","location":null,"numPassingAsserts":0,"status":"passed","title":"should return updated field Status"},{"ancestorTitles":["isFileAllowed"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"isFileAllowed should return true when file extension is in the allow types","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true when file extension is in the allow types"},{"ancestorTitles":["isFileAllowed"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"isFileAllowed should return true when allowedExtensions are any","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true when allowedExtensions are any"},{"ancestorTitles":["isFileAllowed"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isFileAllowed should return false when allowedExtensions when types are different","location":null,"numPassingAsserts":0,"status":"passed","title":"should return false when allowedExtensions when types are different"},{"ancestorTitles":["isFileAllowed"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isFileAllowed should return true when types are the same","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true when types are the same"},{"ancestorTitles":["isFileAllowed"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"isFileAllowed should return true when allowedExtensions are empty","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true when allowedExtensions are empty"},{"ancestorTitles":["isFileAllowed"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"isFileAllowed should return false when file extension is not valid","location":null,"numPassingAsserts":0,"status":"passed","title":"should return false when file extension is not valid"}],"failureMessage":null},{"leaks":false,"numFailingTests":0,"numPassingTests":8,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1658166207394,"runtime":3663,"slow":false,"start":1658166203731},"skipped":false,"testFilePath":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/src/components/contenttypes-fields/dot-form/utils/index.spec.ts","testResults":[{"ancestorTitles":["getFieldVariableValue"],"duration":5,"failureDetails":[],"failureMessages":[],"fullName":"getFieldVariableValue should return field variable value","location":null,"numPassingAsserts":0,"status":"passed","title":"should return field variable value"},{"ancestorTitles":["getFieldVariableValue"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getFieldVariableValue should return undefined if variable key not found","location":null,"numPassingAsserts":0,"status":"passed","title":"should return undefined if variable key not found"},{"ancestorTitles":["getErrorMessage"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"getErrorMessage should return error message","location":null,"numPassingAsserts":0,"status":"passed","title":"should return error message"},{"ancestorTitles":["getErrorMessage"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getErrorMessage should return whole error obj","location":null,"numPassingAsserts":0,"status":"passed","title":"should return whole error obj"},{"ancestorTitles":["fieldCustomProcess"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"fieldCustomProcess should return object","location":null,"numPassingAsserts":0,"status":"passed","title":"should return object"},{"ancestorTitles":["shouldShowField"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"shouldShowField should return true","location":null,"numPassingAsserts":0,"status":"passed","title":"should return true"},{"ancestorTitles":["shouldShowField"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"shouldShowField should return false","location":null,"numPassingAsserts":0,"status":"passed","title":"should return false"},{"ancestorTitles":["getFieldsFromLayout"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"getFieldsFromLayout should fields array","location":null,"numPassingAsserts":0,"status":"passed","title":"should fields array"}],"failureMessage":null}],"wasInterrupted":false,"config":{"bail":0,"changedFilesWithAncestor":false,"collectCoverage":false,"collectCoverageFrom":[],"coverageDirectory":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents/coverage","coverageProvider":"babel","coverageReporters":["json","text","lcov","clover"],"detectLeaks":false,"detectOpenHandles":false,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":false,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":8,"noStackTrace":false,"nonFlagArgs":[],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["/home/runner/work/core/core/core-web/node_modules/jest-html-reporters/index.js",{"publicPath":"test-reports/dotcms-webcomponents","filename":"report.html","openReport":false}]],"rootDir":"/home/runner/work/core/core/core-web/libs/dotcms-webcomponents","runTestsByPath":false,"skipFilter":false,"testFailureExitCode":1,"testPathPattern":"","testSequencer":"/home/runner/work/core/core/core-web/node_modules/@jest/test-sequencer/build/index.js","updateSnapshot":"new","useStderr":false,"watch":false,"watchAll":false,"watchman":true},"endTime":1658166207517,"_reporterOptions":{"publicPath":"test-reports/dotcms-webcomponents","filename":"report.html","expand":false,"pageTitle":"","hideIcon":false,"testCommand":"npx jest","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":""},"attachInfos":{}})